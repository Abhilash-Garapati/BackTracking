class Solution 
{
    public boolean valid(int row,int col,char [][] grid)
    {
        return (row>=0 && col>=0 && row<grid.length && col<grid[0].length);
    }
    public boolean findWord(int idx,char[][]grid,String word,int row,int col,int dirR,int dirC)
    {
        if(idx==word.length())
        {
            return true;
        }
        if(valid(row,col,grid) && grid[row][col]==word.charAt(idx))
        {
            if(findWord(idx+1,grid,word,row+dirR,col+dirC,dirR,dirC))
            {
                return true;
            }
        }
        return false;
    }
    public int[][] searchWord(char[][] grid, String word) 
    {
        // Code here
        int n = grid.length;
        int m = grid[0].length;
        int delrow [] = {1,1,1,0,0,-1,-1,-1};
        int delcol [] = {-1,0,1,-1,1,-1,0,1};
        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();
        for(int i = 0;i<n;i++)
        {
            for(int j = 0;j<m;j++)
            {
                for(int k = 0;k<8;k++)
                {
                    if(findWord(0,grid,word,i,j,delrow[k],delcol[k]))
                    {
                        ArrayList<Integer> curr = new ArrayList<>();
                        curr.add(i);
                        curr.add(j);
                        ans.add(new ArrayList<>(curr));
                        break;
                    }
                }
            }
        }
        if(ans.size()==0)
        {
            return new int[0][0];
        }
        int res[][] = new int[ans.size()][ans.get(0).size()];
        for(int i = 0;i<ans.size();i++)
        {
            res[i][0] = ans.get(i).get(0);
            res[i][1] = ans.get(i).get(1);
        }
        return res;
        
    }
}
