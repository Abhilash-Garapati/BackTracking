class Solution 
{
    public ArrayList<ArrayList<Integer>> nQueen(int n) 
    {
        // code here
        char ch [][] = new char[n][n];
        for(int i = 0;i<n;i++)
        {
            for(int j = 0;j<n;j++)
            {
                ch[i][j] = '.';
            }
        }
        ArrayList<ArrayList<Integer>> res = new ArrayList<>();
        solveNQueens(ch,0,n,res);
        return res;
    }
    public void solveNQueens(char ch [][],int row,int n,ArrayList<ArrayList<Integer>> res )
    {
        if(row==n)
        {
            ArrayList<Integer> temp = new ArrayList<>();
            for(int i =0;i<n;i++)
            {
                for(int j = 0;j<n;j++)
                {
                    if(ch[i][j]=='Q')
                    {
                        temp.add(j+1);
                    }
                }
            }
            res.add(temp);
            return;
        }
        for(int col = 0;col<n;col++)
        {
            if(isSafe(ch,row,col,n))
            {
                ch[row][col] = 'Q';
                solveNQueens(ch,row+1,n,res);
                ch[row][col] = '.';
            }
        }
    }
    public boolean isSafe(char ch[][],int row,int col,int n)
    {
        //Vertical
        for(int i = 0;i<row;i++)
        {
            if(ch[i][col]=='Q')
            {
                return false;
            }
        }
        //Left Diagonal
        for(int i = row-1, j=col-1 ; i>=0&&j>=0 ; i--,j--)
        {
            if(ch[i][j]=='Q')
            {
                return false;
            }
        }
        //right Diagonal
        for(int i = row-1, j=col+1 ;i>=0&&j<n ; i--,j++)
        {
            if(ch[i][j]=='Q')
            {
                return false;
            }
        }
        return true;
    }
    
}
