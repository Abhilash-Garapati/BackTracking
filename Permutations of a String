class Solution 
{
    public ArrayList<String> findPermutation(String s) 
    {
        // Code here
        ArrayList<String> res = new ArrayList<>();
        StringBuilder path = new StringBuilder();
        char ch[] = s.toCharArray();
        Arrays.sort(ch);
        boolean used [] = new boolean[s.length()];
        backTrack(path,ch,used,res);
        return res;
    }
    public void backTrack(StringBuilder path, char ch[],boolean used[],ArrayList<String> res)
    {
        if(path.length()==ch.length)
        {
            res.add(path.toString());
            return;
        }
        for(int i = 0;i<ch.length;i++)
        {
            if(used[i]==true)
            {
                continue;
            }
            if(i>0 &&(ch[i]==ch[i-1]) && (!used[i-1]))
            {
                continue;
            }
            used[i] = true;
            path.append(ch[i]);
            backTrack(path,ch,used,res);
            path.deleteCharAt(path.length()-1);
            used[i] = false;
        }
    }
}
